

<!-- <!DOCTYPE html> -->
<html>
    <head>
        <title>Experiment</title>
        <script language="javascript" src="libraries/p5.min.js"></script>
        <script language="javascript" src="libraries/p5.dom.js"></script>
        <script language="javascript" src="libraries/lodash.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script language="javascript" src="jspsych/jspsych.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-instructions.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-beadtask.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-multi-choice.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-pdi-onepage.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-crt.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-bade.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-external-html.js"></script>
        <link href="jspsych/css/jspsych.css" rel="stylesheet" type="text/css"></link>
        <link href="./css/survey.css" rel="stylesheet" type="text/css"></link>
    </head>
    <body>
    </body>
    <script>

    var trialId = <%- trialId %>

    jsPsych.data.addProperties({trialId: trialId});

    var cmpltnCd = makeCode(3)+'RtR' + makeCode(5) + '4z4'
    jsPsych.data.addProperties({cmpltnCd: cmpltnCd});

    var timeline = [];
    var beadTimeline = [];
    var badeTimeline = [];
    var startTime;
    var score = 0;
    var comprehensionRounds = [];

    // consent

    var consent = {
      type: 'external-html',
      url: '../views/consent.html',
      check_fn: function(){
        startTime = (new Date()).getTime();
        return true;
      },
      cont_btn: 'consent'
    }

    // Initial instructions

    var mainInstructions = {
      type: 'instructions',
      pages: ["You will do five tasks in this survey.<br><br>"+
      "In the first two tasks, you will make decisions based on how probable something is.<br><br>"+
      "Then you will answer some questions about your experiences and perceptions.<br><br>"+
      "Fourth, you will solve a few straightforward math problems.<br><br>"+
      "Finally, you will answer some questions about words.<br><br>"+
      "After completing all tasks, we'll ask for some biographical information.",
      "Please do not google any of the answers. We are interested in your honest responses.<br><br>"+
      "We have included several <b>attention checks</b>, so please read carefully.<br><br>"+
      "The first task is introduced on the next screen."],
      show_clickable_nav: true
    };

    // Bead task

    // instructions
    var startInstructions = {
      type: 'instructions',
      pages: ["We are going to do a task that involves drawing colored beads out of an urn, to learn what the majority color in that urn is.<br><br>"+
              "We will begin with some detailed instructions, accompanied by a visual illustration of the bead task.",
              "After we've gone through the instructions, your understanding of the task will be tested.<br><br>"+
              "You need to get <b>all</b> the comprehension questions right before you can proceed to the actual task.<br><br>"+
              "If you get <b>any</b> wrong, we'll go through the instructions and test your understanding again, until you get all the test questions right.<br><br>"+
              "About 25% of participants fail to get them all right on the first attempt, so if you pay careful attention, you can avoid wasting time."],
      show_clickable_nav: true
    };

    // practice trial
    var trainingTrial = {
      type: 'beadtask',
      training: true,
      firstColor: [0, 0, 0],
      colorRatio: 0.8
    };

    // elements needed for comprehension check, and for looping back through the instructions if participant fails the comprehension check

    var comprehensionInstructions = {
      type: 'instructions',
      pages: ["Next we are going to check whether you've understood the previous instructions by asking some True/False questions.<br><br>"+
              "You will not be able to proceed with the experiment until all of these comprehension questions are answered correctly.<br><br>"+
              "If you get any of these wrong, the previous instructions will be replayed so that you can check what the right answers are."],
      show_clickable_nav: true
    };

    var comprehensionOptions= ['True', 'False'];
    var correctAnswers = {"Q0": "True", "Q1" : "False", "Q2" : "False", "Q3" : "True"};

    comprehensionQuestions = [
      {prompt: 'Each urn has different majority colors',
        options: comprehensionOptions,
        horizontal: true
      },
      {prompt: 'Beads will be drawn from both of the urns',
        options: comprehensionOptions,
        horizontal: true
      },
      {prompt: 'If five beads are drawn, there will be five fewer beads left in the urn',
        options: comprehensionOptions,
        horizontal: true
      },
      {prompt: 'Both colors could get drawn from the same urn.',
        options: comprehensionOptions,
        horizontal: true
      }
    ]

    var comprehension1 = {
      type: 'survey-multi-choice',
      questions: comprehensionQuestions,
      on_finish: function(data){
        // score the responses
        var responses = JSON.parse(data.responses);
        // initialize an array of 0s
        var comprehensionTracker = _.map(comprehensionQuestions, function(item){return 0});
        var questionCounter = 0;
        score = _.reduce(responses, function(tally, response, questionNumber){
           if (response == correctAnswers[questionNumber]) {
             comprehensionTracker[questionCounter] = 1
             tally += 1
           }
           questionCounter+=1
           return tally
        }, 0)
        comprehensionRounds.push(comprehensionTracker);
      }
    };

    var feedback1 = {
      type: 'instructions',
      pages: function(){
        if (score < 4){
          return ['You got ' + score + '/4 correct. We will go through the instructions and demonstration again.'];
        } else {
          return ["You got them all right! We're going to repeat the task twice, each time with a slight variation in instructions and with a different set of urns (and bead colors)."];
        }
      },
      show_clickable_nav: true
    };

    // node for looping through instructions until score is 5 (out of 5 questions)

    var loop_node = {
      timeline: [startInstructions, trainingTrial, comprehensionInstructions, comprehension1, feedback1],
      loop_function: function(data){
        if (score==comprehensionQuestions.length){
          return false;
        } else {
          return true;
        }
      }
    };

    beadTimeline.push(loop_node);

    // trial data

    var colors = shuffle([[0, 102, 153], [0, 153, 255], [51, 51, 255], [153, 153, 255], [255, 0, 255], [255, 153, 153]]);

    var instructionsDTD = {
      type: 'instructions',
      pages: ["In <b>this</b> version of the task, it will be <b>up to you</b> to decide how many beads you'd like to draw from the urn before guessing the majority color of the urn.<br><br>"+
      "After each draw, we'll ask you if you'd like to see another bead, or are ready to make your decision.<br><br>"+
      "Whenever you're <b>confident</b> what the majority color in the urn is, just click that you're ready to decide."],
      show_clickable_nav: true
    };

    var instructionsGE = {
      type: 'instructions',
      pages: ["In <b>this</b> version of the task, you will see 10 beads before you can make a decision about what the majority color is.<br><br>"+
      "After each draw, you'll rate how confident you are.<br><br>"+
      "Once you've seen 10 beads, we will ask you to make a decision about what the majority color is."],
      show_clickable_nav: true
    };

    var drawsDTD;
    if(Math.random()<0.5){
      drawsDTD = [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0]
    } else {
      drawsDTD = [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1]
    }

    beadDTD = {
      type: 'beadtask',
      firstColor: colors[0],
      colorRatio: 0.6,
      draws: drawsDTD,
      beadCount: 100,
      record: true,
      graded: true,
      feedback: false,
      sequential: true,
      drawCount: 30
    };

    var drawsGE;
    if(Math.random()<0.5){
      drawsGE = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0]
    } else {
      drawsGE = [1, 1, 0, 1, 1, 0, 1, 1, 0, 1]
    }


    beadGE = {
      type: 'beadtask',
      firstColor: colors[1],
      colorRatio: 0.6,
      draws: drawsGE,
      beadCount: 100,
      record: true,
      graded: true,
      feedback: false,
      sequential: true,
      allowChoice: false,
      drawCount: 10
    };

    if( Math.random() < 0.5 ){
        beadTimeline = beadTimeline.concat([instructionsGE, beadGE, instructionsDTD, beadDTD]);
    } else {
        beadTimeline = beadTimeline.concat([instructionsDTD, beadDTD, instructionsGE, beadGE]);
    }

    // Bade task

    var badeInstructions = {
      type: 'instructions',
      pages: ["In this task, we will give you a scenario, and then ask you to rate how likely various explanations are.<br><br>"+
      "For example, we might give you the information that someone called Harriet hasn't been on vacation in years, and then ask you to rate how likely the following two explanations are: 'Harriet has less than a thousand dollars' and 'Harriet has more than a million dollars'.<br><br>"+
      "Most people would rate the first explanation as more probable than the second.",
      "We will then give you more information, piece by piece, about the <b>same</b> scenario. This extra information <b>may</b> make you want to change your previous probability ratings, or <b>may</b> make no difference.<br><br>"+
      "For instance, we might tell you that Harriet is worried about her rent (making it more likely she's poor), or that she is on the boards of several companies (making it more likely she's rich), or that she likes pizza (which makes no difference).",
      "Ultimately, it may turn out that <b>none</b> of the explanations is very probable, that <b>one</b> is more probable that the others, or that <b>a couple</b> are equally probable. Thus, you may have several high ratings, or just one, or none.<br><br>"+
      "We will present scenarios involving 12 different people. The task will begin on the next page."],
      show_clickable_nav: true
    };

    badeTimeline.push(badeInstructions);

    var badeScaleLabels = [
    'extremely\nimprobable',
    'improbable',
    'somewhat\nimprobable',
    'as probable\nas not',
    'somewhat\nprobable',
    'probable\n',
    'extremely\nprobable'];

    var badeTrials = [

      {trial_number: 0,
      scenarios: ["The picnic came to an abrupt end.",
      "Everyone went home stunned from the picnic’s outcome.",
      "By the time the ambulance arrived it was too late."],
      explanations: ["It started to rain unexpectedly.",
      "The families began to argue with one another.",
      "The volcano began to erupt.",
      "Frank died from an allergic reaction to a bee sting."],
      character_name: "a picnic"},

      {trial_number: 1,
      scenarios: ["Danielle is very unreliable.",
      "Danielle does not like criticism.",
      "Danielle was rude to her boss."],
      explanations: ["Danielle often forgets her homework.",
      "Danielle is a poor mother.",
      "Danielle is not a very good cook.",
      "Danielle has been fired from her job."],
      character_name: "Danielle"},

      {trial_number: 2,
      scenarios: ["Nicole has an immense amount of will power.",
      "Nicole loves to be challenged.",
      "Nicole is very fit."],
      explanations: ["Nicole is studying all night.",
      "Nicole is a recovering alcoholic.",
      "Nicole only eats red candy.",
      "Nicole is a marathon champion."],
      character_name: "Nicole"},

      {trial_number: 3,
      scenarios: ["Sometimes Veronica goes home in tears.",
      "Veronica does not have many friends.",
      "Veronica is afraid of her classmates."],
      explanations: ["Veronica is always overly dramatic.",
      "Veronica is suffering from the side effects of her medication.",
      "Veronica likes to water the plants with her tears.",
      "Veronica is bullied at school."],
      character_name: "Veronica"},

      {trial_number: 4,
      scenarios: ["Tiffany watches her diet.",
      "Tiffany must be careful to avoid sugar.",
      "Tiffany uses needles every day."],
      explanations: ["Tiffany is a fitness instructor.",
      "Tiffany has an eating disorder.",
      "Tiffany does not know how to cook eggs.",
      "Tiffany is diabetic."],
      character_name: "Tiffany"},

      {trial_number: 5,
      scenarios: ["Jenny can't fall asleep.",
      "Jenny can't wait until it's finally morning.",
      "Jenny wonders how many presents she will find under the tree."],
      explanations: ["Jenny is nervous about her exam the next day.",
      "Jenny is worried about her ill mother.",
      "Jenny loves her bed.",
      "Jenny is excited about Christmas morning."],
      character_name: "Jenny"},

      {trial_number: 6,
      scenarios: ["Michael's job is to entertain people.",
      "Michael is a little shy sometimes.",
      "Michael sits in front of a computer writing all day long."],
      explanations: ["Michael is a famous magician.",
      "Michael the clown entertains sick children in the hospital.",
      "Michael is a poker player.",
      "Michael's job is to write novels."],
      character_name: "Michael"},

      {trial_number: 7,
      scenarios: ["Andrea has made some new friends.",
      "Andrea's new friends control every single aspect of her life.",
      "Andrea has very suddenly cut off all contact with her family."],
      explanations: ["Andrea has just started going to university.",
      "Andrea is a kind and caring person.",
      "Andrea loves to be photographed.",
      "Andrea has joined a cult."],
      character_name: "Andrea"},

      //distractors
      {trial_number: 8,
      scenarios: ["Jason is a successful business man.",
      "Jason's clients are mainly young people.",
      "Jason never gets caught by the police."],
      explanations: ["Jason is a bank manager.",
      "Jason is an owner of a rehabilitation center.",
      "Jason is a pimp.",
      "Jason is a drug dealer."],
      character_name: "Jason"},

      {trial_number: 9,
      scenarios: ["Gary is responsible for many lives.",
      "Gary's work can get be quite boring and repetitive.",
      "Gary's route is one of the busiest."],
      explanations: ["Gary is an army general.",
      "Gary is a surgeon.",
      "Gary is a clown.",
      "Gary is a sports-cast announcer."],
      character_name: "Gary"},

      {trial_number: 10,
      scenarios: ["Eric often carries binoculars with him.",
      "Eric always has an unpredictable schedule.",
      "Eric tries to solve mysteries."],
      explanations: ["Eric is a bird expert.",
      "Eric is a stalker.",
      "Eric is an astronaut.",
      "Eric is a tennis player."],
      character_name: "Eric"},

      // attention check
      {trial_number: 11,
      scenarios: ["Susan can hardly speak or think.",
      "Susan made a bad decision in her past.",
      "To show you are being careful, please set all response sliders to the minimum."],
      explanations: ["Susan is very drunk.",
      "Susan is mentally handicapped.",
      "Susan has been kidnapped.",
      "Susan does not like doing much."],
      character_name: "Susan"}
    ];

    var bade = {
      timeline: [{
        type: 'bade',
        rating_type: 'posterior',
        rate_priors: false,
        scale_labels: badeScaleLabels,
        scenarios: jsPsych.timelineVariable('scenarios'),
        explanations: jsPsych.timelineVariable('explanations'),
        trial_number: jsPsych.timelineVariable('trial_number'),
        character_name: jsPsych.timelineVariable('character_name'),
      }],
      timeline_variables: badeTrials,
      randomize_order: true,
      rate_priors: false,
      post_trial_gap: 900
    }

    badeTimeline.push(bade);

    // task 3: PDI

    var pdiInstructions = {
      type: 'instructions',
      pages: ["Next (the 3rd task of 5) is a quick questionnaire designed to measure beliefs and vivid mental experiences.<br><br>"+
      "We believe that these beliefs and experiences are much more common than has previously been supposed, and that most people have had some such experiences during their lives.<br><br>"+
      "Please answer the following questions as honestly as you can.<br><br>"+
      "Please note that we are NOT asking about experiences people may have had when under the influence of drugs."],
      show_clickable_nav: true
    };

    var pdi = {
      type: 'pdi-onepage',
      followUp: true,
      attentionCheck: true,
      includeCAPE: true
    };

    // task 4: CRT

    var crt_instructions = {
      type: "instructions",
      show_clickable_nav: true,
      pages: ["Almost there! In the next task (task 4 of 5), you will solve some simple math or logic problems.<br><br>"+
      "They can all be worked out fairly straightforwardly. You certainly <b>don't</b> need paper and a pen/pencil for working them out. If you think you might, you're probably overthinking things.<br><br>"+
      "Do not answer 'I don't know' or 'no idea' or similar. Just give your best answer.<br><br>"+
      "The task begins on the next page."]
    };

    var crt_questions = [
    {qNo: 0, question: "The ages of Mark and Adam add up to 28. Mark is 20 years older than Adam. How old is Adam?",
    unit: "years old"},
    {qNo: 1, question: "If it takes 10 seconds for 10 printers to print out 10 pages of paper, how many seconds will it take 50 printers to print out 50 pages of paper?",
    unit: "seconds"},
    {qNo: 2, question: "On a loaf of bread, there is a patch of mold. Every day, the patch doubles in size. If it takes 40 days for the patch to cover the entire loaf of bread, how many days would it take for the patch to cover half the loaf of bread?",
    unit: "days"},
    {qNo: 3, question: "If you're running a race and you pass the person in second place, what place are you in?",
    unit: "place"},
    {qNo: 4, question: "A farmer had 15 sheep and all but 8 died. How many are left?",
    unit: "sheep"},
    {qNo: 5, question: "Emily's father has three daughters. The first two are named April and May. What is the third daughter's name?"},
    {qNo: 6, question: "How many cubic feet of dirt are there in a hole that is 3' deep x 3' wide x 3' long?",
    unit: "cubic feet"},
    // attention check
    {qNo: 7, question: "How many days are there in two weeks? To show you're reading this, enter double the actual number.",
    unit: "days"},
    // verbal reasoning from Condon & Revelle (2014)
    {qNo: 8, question: "What number is one fifth of one fourth of one ninth of 900?"},
    {qNo: 9, question: "Zach is taller than Matt and Richard is shorter than Zach. Which of the following statements would be most accurate?<br><br>"+
    "(1) Richard is taller than Matt (2) Richard is shorter than Matt (3) Richard is as tall as Matt (4) It's impossible to tell",
    unit: "[enter number]"},
    {qNo: 10, question: "Joshua is 12 years old and his sister is three times as old as he. When Joshua is 23 years old, how old will his sister be?",
    unit: "years old"},
    {qNo: 11, question: "If the day after tomorrow is two days before Thursday then what day is it today?"}
    ];

    var crtTrial = {
      type: 'crt',
      question: jsPsych.timelineVariable('question'),
      unit: jsPsych.timelineVariable('unit'),
      options: jsPsych.timelineVariable('options'),
      qNo: jsPsych.timelineVariable('qNo'),
      naivete: false,
    };

    var crtTrials = {
        timeline: [crtTrial],
        timeline_variables: crt_questions,
        randomize_order: true,
    };

    var crtNaivete = {
      type: 'survey-multi-choice',
      questions: [
        {prompt: "Some of the problems you've just finished are adapted from classic problems that are quite common on Turk, or web pages or books about problem solving, so you may have seen them before.<br><br>"+
        "You may have seen them with different wording (e.g., referring to the cost of a bat and a ball, time taking for machines to make widgets, and the time taken for lily pads to grow)<br><br>"+
        "Have you seen <b>any</b> of these problems before? Please answer honestly since it won't affect the rest of the survey or your payment, but will affect our data.<br><br>",
          options: [' Definitely not', ' Probably not', ' Uncertain', ' Probably yes', ' Definitely yes'],
          horizontal: true
        }
      ]
    }

    // task 5: wordsum

    var wordSum_instructions = {
      type: 'instructions',
      show_clickable_nav: true,
      pages: ["In the last task, you'll answer a multiple-choice vocabulary test. Please do not google the answers - we just want to know which words you really know and there is no prize for doing well in this task.<br><br>"+
      "For the same reason, you should choose \"don't know\" rather than guessing if you don't know the answer.<br><br>"+
      "The task starts on the next page."]
    };

    var wordSum_questions = [
        {qNo: 0,
        prompt: 'SPACE',
        options: ['school', 'noon', 'captain', 'room', 'board', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 1,
        prompt:'BROADEN',
        options: ['efface', 'make level', 'elapse', 'embroider', 'widen', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 2,
        prompt:'EMANATE',
        options: ['populate', 'free', 'prominent', 'rival', 'come', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 3,
        prompt:'EDIBLE',
        options: ['auspicious', 'eligible', 'fit to eat', 'sagacious', 'able to speak', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 4,
        prompt:'ANIMOSITY',
        options: ['hatred', 'animation', 'disobedience', 'diversity', 'friendship', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 5,
        prompt:'PACT',
        options: ['puissance', 'remonstrance', 'agreement', 'skillet', 'pressure', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 6,
        prompt:'CLOISTERED',
        options: ['miniature', 'bunched', 'arched', 'malady', 'secluded', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 7,
        prompt:'CAPRICE',
        options: ['value', 'star', 'grimace', 'whim', 'inducement', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 8,
        prompt:'ACCUSTOM',
        options: ['disappoint', 'customary', 'encounter', 'get used to', 'business', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 9,
        prompt:'ALLUSION',
        options: ['reference', 'dream', 'eulogy', 'illusion', 'aria', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 10,
        prompt:'APPARITION',
        options: ['ghost', 'insurrection', 'apparent', 'farce', 'apparel', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 11,
        prompt:'CONFOUND',
        options: ['discovered', 'fulfill', 'establish', 'mix up', 'expire', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 12,
        prompt:'APERTURE',
        options: ['through', 'precipice', 'opening', 'raiment', 'opportunity', "don't know"],
        horizontal: true,
        required: true},
        {qNo: 13,
        prompt:'RECIPROCAL',
        options: ['saturnine', 'mutual', 'receptive', 'morose', 'careless', "don't know"],
        horizontal: true,
        required: true},
      ];

    wordSum_questions = jsPsych.randomization.repeat(wordSum_questions, 1);

    var wordSum = {
      type: 'survey-multi-choice',
      questions: wordSum_questions,
      post_trial_gap: 500,
      preamble: 'Select the best-fitting meaning for each word.',
      on_finish: function(data){
        jsPsych.data.get().addToLast({order: wordSum_questions});
      }
    };

    // Biographic info

    var bioData = {};

    function checkResponses(){
      //Check that all questions are answered, and that only numbers are used in responding to Age
      var age = $('input[name=ageText]', '#biography').val();
      var gender = $('input[name=genderRadio]:checked', '#biography').val();
      var education = $('input[name=eduRadio]:checked', '#biography').val();
      var language = $('input[name=languageRadio]:checked', '#biography').val();
      var religion = $('input[name=religionText]', '#biography').val();
      var comments = $('textarea', '#biography').val();

      var ageFail = true;
      var genderFail = true;
      var genderSelfDescribe = false;
      var languageFail = true;
      var eduFail = true;
      var religionFail = true;

      if( age > 0 ){
        ageFail = false;
        $('#age>p').css('color', 'black');
      } else {
        $('#age>p').css('color', 'red');
      }

      if( gender == 'other' ){
        genderSelfDescribe = true;
        var descr = $('input[name=other_text]', '#biography').val().replace(/\s+/g, '');
        if( descr.length > 0 ){
          genderSelfDescribe = false;
          gender = descr
        }
      }

      if (typeof gender != 'undefined'){
        genderFail = false;
        $('#gender>p').css('color', 'black');
      } else {
        $('#gender>p').css('color', 'red');
      }

      if (education >= 0){
        eduFail = false;
        $('#education>p').css('color', 'black');
      } else {
        $('#education>p').css('color', 'red');
      }

      if( religion >= 0 && religion <= 100 && religion !== ''){
        religionFail = false;
        $('#religion>p').css('color', 'black');
      } else {
        $('#religion>p').css('color', 'red');
      }

      if( language >= 0 ){
        languageFail = false;
        $('#language>p').css('color', 'black');
      } else {
        $('#language>p').css('color', 'red');
      }


      if( genderFail || ageFail || languageFail || genderSelfDescribe || eduFail || religionFail ){
        var alertMessage = "Please check you've provided an answer to all questions in red.";
        if( ageFail || religionFail ){
          alertMessage += " Check that you've only included numbers when giving your age or rating religious belief. "
        }
        if( genderSelfDescribe ){
          alertMessage += " If you've chosen to self-describe your gender, please fill in a value. "
        }
        alert(alertMessage);
      } else {
        bioData = {
          age: age,
          gender: gender,
          language: language,
          education: education,
          religion: religion,
          comments: comments
        };
        return true;
      }

    };

    var biographic = {
      type: 'external-html',
      url: '../views/biographic.html',
      check_fn: checkResponses,
      cont_btn: 'submit',
    }

    timeline.push(consent);
    timeline.push(mainInstructions);

    // Randomize order of bead/bade tasks
    if( Math.random() < 0.5 ){
      timeline = timeline.concat(beadTimeline)
      timeline = timeline.concat(badeTimeline)
    } else {
      timeline = timeline.concat(badeTimeline)
      timeline = timeline.concat(beadTimeline)
    }

    // NO!
    // timeline = timeline.concat(beadTimeline);
    // timeline = timeline.concat(badeTimeline);

    timeline.push(pdiInstructions);
    timeline.push(pdi);

    timeline.push(crt_instructions);
    timeline.push(crtTrials);
    timeline.push(crtNaivete);

    timeline.push(wordSum_instructions);
    timeline.push(wordSum);

    timeline.push(biographic);

    jsPsych.init({
        default_iti: 500,
        show_progress_bar: true,
        preload_images: ['img/greek-urn-md.png'],
        exclusions: {
          min_width: 800,
          min_height: 600
        },
        timeline: timeline,
        on_finish: function(){
          save();
        }
    });

function save(){
  var endTime = (new Date()).getTime();
  var duration = endTime-startTime;
  var interactionData = jsPsych.data.getInteractionData().json();
  jsPsych.data.get().addToLast({biodata: bioData,
                                duration: duration,
                                interactionData: interactionData,
                                comprehension: comprehensionRounds});

  var data = jsPsych.data.get().json();
  console.log('    About to post survey output data...', data);

  var dataUrl = '/Vn3OGu8kcy?trialId=' + trialId;
  $.ajax({
     type: 'POST',
     url: dataUrl,
     data: data,
     contentType: "application/json",
     error: function(request, status, error){
       console.log('    Error posting data...', request, status, error)
     },
     complete: finish(cmpltnCd)
   });
}

function finish(cmpltnCd){
  cmpltnCd +=  trialId;
  window.location.href = "/TyNFQbzAlF?gvmejG="+cmpltnCd;
}

function shuffle(unshuffled){
  // shuffle an array
  var shuffled = [];
  var N = unshuffled.length;
  for( var i = 0; i < N; i++ ){
    var index = Math.floor(Math.random() * (unshuffled.length));
    var newValue = unshuffled[index];
    shuffled.push(newValue);
    unshuffled.splice(index, 1);
  }
  return shuffled;
};

function makeCode(len){
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxy0123456789";
    for( var i=0; i < len; i++ ){
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
};


    </script>
</html>



<!-- <!DOCTYPE html> -->
<html>
    <head>
        <title>Experiment</title>
        <script language="javascript" src="libraries/p5.min.js"></script>
        <script language="javascript" src="libraries/p5.dom.js"></script>
        <script language="javascript" src="libraries/lodash.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script language="javascript" src="jspsych/jspsych.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-instructions.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-beadtask.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-multi-choice.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-pdi-onepage.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-crt.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-bade.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-external-html.js"></script>
        <link href="jspsych/css/jspsych.css" rel="stylesheet" type="text/css"></link>
        <link href="./css/survey.css" rel="stylesheet" type="text/css"></link>
    </head>
    <body>
    </body>
    <script>

    var trialId = <%- trialId %>

    jsPsych.data.addProperties({trialId: trialId});

    var cmpltnCd = makeCode(3)+'RtR' + makeCode(5) + '4z4'
    jsPsych.data.addProperties({cmpltnCd: cmpltnCd});

    var timeline = [];
    var beadTimeline = [];
    var badeTimeline = [];
    var startTime;
    var score = 0;
    var comprehensionRounds = [];

    // consent

    var consent = {
      type: 'external-html',
      url: '../views/consent.html',
      check_fn: function(){
        startTime = (new Date()).getTime();
        return true;
      },
      cont_btn: 'consent'
    }

    // Initial instructions

    var mainInstructions = {
      type: 'instructions',
      pages: ["You will do four tasks in this survey.",
      "In the first two tasks, you will make decisions based on how probable something is.",
      "Then you will answer some questions about your experiences and perceptions.",
      "Finally, you will solve a few straightforward math problems.",
      "After completing all tasks, we'll ask for some biographical information",
      "Please do not google any of the answers. We are interested in your honest responses.",
      "The first task is introduced on the next screen."],
      show_clickable_nav: true
    };

    // Bead task

    // instructions
    var startInstructions = {
      type: 'instructions',
      pages: ["We are going to do a task that involves drawing colored beads out of an urn until you're confident what the majority color in that urn is.",
              "We will begin with some detailed instructions, accompanied by a visual illustration of the bead task.",
              "After we've gone through the instructions, your understanding of the task will be tested.",
              "You need to get <b>all</b> the comprehension questions right before you can proceed to the actual task.",
              "If you get <b>any</b> wrong, we'll go through the instructions and test your understanding again, until you get all the test questions right.",
              "About 50% of participants fail to get them all right on the first attempt, so if you pay careful attention, you can avoid wasting time.",
              "Now, we will start going through the instructions."],
      show_clickable_nav: true
    };

    // practice trial
    var trainingTrial = {
      type: 'beadtask',
      training: true,
      firstColor: [0, 0, 0],
      colorRatio: 0.8
    };

    // elements needed for comprehension check, and for looping back through the instructions if participant fails the comprehension check

    var comprehensionInstructions = {
      type: 'instructions',
      pages: ["Next we are going to check whether you've understood the previous instructions by asking some True/False questions.",
              "You will not be able to proceed with the experiment until all of these comprehension questions are answered correctly.",
              "If you get any of these wrong, the previous instructions will be replayed so that you can check what the right answers are."],
      show_clickable_nav: true
    };

    var comprehensionOptions= ['True', 'False'];
    var correctAnswers = {"Q0": "True", "Q1" : "False", "Q2" : "False", "Q3" : "True"};

    comprehensionQuestions = [
      {prompt: 'Each urn has different majority colors',
        options: comprehensionOptions,
        horizontal: true
      },
      {prompt: 'Beads will be drawn from both of the urns',
        options: comprehensionOptions,
        horizontal: true
      },
      {prompt: 'If five beads are drawn, there will be five fewer beads left in the urn',
        options: comprehensionOptions,
        horizontal: true
      },
      {prompt: 'Beads of either color could get drawn from the same urn.',
        options: comprehensionOptions,
        horizontal: true
      }
    ]

    var comprehension1 = {
      type: 'survey-multi-choice',
      questions: comprehensionQuestions,
      on_finish: function(data){
        // score the responses
        var responses = JSON.parse(data.responses);
        // initialize an array of 0s
        var comprehensionTracker = _.map(comprehensionQuestions, function(item){return 0});
        var questionCounter = 0;
        score = _.reduce(responses, function(tally, response, questionNumber){
           if (response == correctAnswers[questionNumber]) {
             comprehensionTracker[questionCounter] = 1
             tally += 1
           }
           questionCounter+=1
           return tally
        }, 0)
        comprehensionRounds.push(comprehensionTracker);
      }
    };

    var feedback1 = {
      type: 'instructions',
      pages: function(){
        if (score < 4){
          return ['You got ' + score + '/4 correct. We will go through the instructions and demonstration again.'];
        } else {
          return ["You got them all right! We're going to repeat the task twice, each time with a slight variation in instructions and with a different set of urns."];
        }
      },
      show_clickable_nav: true
    };

    // node for looping through instructions until score is 5 (out of 5 questions)

    var loop_node = {
      timeline: [startInstructions, trainingTrial, comprehensionInstructions, comprehension1, feedback1],
      loop_function: function(data){
        if (score==comprehensionQuestions.length){
          return false;
        } else {
          return true;
        }
      }
    };

    beadTimeline.push(loop_node);

    // trial data

    var colors = shuffle([[0, 102, 153], [0, 153, 255], [51, 51, 255], [153, 153, 255], [255, 0, 255], [255, 153, 153]]);

    var instructionsDTD = {
      type: 'instructions',
      pages: ["For the following trial, it will be <b>up to you</b> to decide how many beads you'd like to draw from the urn before guessing the majority color of the urn.",
      "After each draw, we'll ask you if you'd like to see another bead, or are ready to make your decision.",
      "Whenever you're <b>confident</b> what the majority color in the urn is, just click that you're ready to decide."],
      show_clickable_nav: true
    };

    var instructionsGE = {
      type: 'instructions',
      pages: ["For the following trial, you will see 10 beads before you can make a decision about what the majority color is.",
      "After each draw, you'll rate how confident you are.",
      "Once you've seen 10 beads, we will ask you to make a decision about what the majority color is."],
      show_clickable_nav: true
    };

    beadDTD = {
      type: 'beadtask',
      firstColor: colors[0],
      colorRatio: 0.6,
      draws: [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0],
      beadCount: 100,
      record: true,
      graded: true,
      feedback: false,
      sequential: true,
      drawCount: 30
    };


    beadGE = {
      type: 'beadtask',
      firstColor: colors[1],
      colorRatio: 0.6,
      draws: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
      beadCount: 100,
      record: true,
      graded: true,
      feedback: false,
      sequential: true,
      allowChoice: false,
      drawCount: 10
    };

    if( Math.random() < 1 ){
        beadTimeline = beadTimeline.concat([instructionsGE, beadGE, instructionsDTD, beadDTD]);
    } else {
        beadTimeline = beadTimeline.concat([instructionsDTD, beadDTD, instructionsGE, beadGE]);
    }

    // Bade task

    var badeInstructions = {
      type: 'instructions',
      pages: ["In this task, we will first ask you to rate how probable 4 statements are, all else being equal.",
      "They may refer to random people, but you can still estimate how probable you think the statements are.",
      "For example, if you were given the statements 'Harriet has less than a thousand dollars' and 'Harriet has more than a million dollars', you might rate the first statement as much more probable than the second because most people aren't millionaires.",
      "After you've rated how probable the statements are, we will start giving you extra information, piece by piece, about the same people. This extra information may make you want to change your previous probability ratings.",
      "For example, if we also told you that Harriet can't afford to go on vacation, it makes it even less probable that she has a million dollars. If we told you that she just bought another jet, it makes it more probable that she has a million dollars.",
      "Ultimately, it may turn out that <b>none</b> of the statements is very probable, that <b>one</b> is more probable that the others, or that <b>a couple</b> are equally probable. Thus, you may have several high ratings, or just one, or none."],
      show_clickable_nav: true
    };

    badeTimeline.push(badeInstructions);

    var badeScaleLabels = [
    'extremely\nimprobable',
    'improbable',
    'somewhat\nimprobable',
    'as probable\nas not',
    'somewhat\nprobable',
    'probable\n',
    'extremely\nprobable'];

    var badeTrials = [
      {trial_number: 0,
      scenarios: ["Judy saved the little girl's life.",
      "Judy's family supported Judy's decision to help the little girl.",
      "Luckily, Judy is the same blood-type as the little girl."],
      explanations: ["Judy is a fire-fighter.",
      "Judy is a doctor.",
      "Judy is a witch.",
      "Judy is an organ donor."],
      character_name: "Judy"},

      {trial_number: 1,
      scenarios: ["Sometimes Veronica goes home in tears.",
      "Veronica does not have many friends.",
      "Veronica is afraid of her classmates."],
      explanations: ["Veronica is always overly dramatic.",
      "Veronica is suffering from the side effects of her medication.",
      "Veronica likes to water the plants with her tears.",
      "Veronica is bullied at school."],
      character_name: "Veronica"},

      {trial_number: 2,
      scenarios: ["Janet is screaming.",
      "Janet will have to go to court.",
      "Janet is an irresponsible parent."],
      explanations: ["Someone scratched the paint on Janet's new car.",
      "Janet caught her husband cheating on her.",
      "Janet's bad singing is often mistaken for screaming.",
      "Janet's children are being taken away by Social Services."],
      character_name: "Janet"},

      // {trial_number: 3,
      // scenarios: ["Luke spends lots of time driving.",
      // "Luke is a young man.",
      // "Luke's car often smells like pizza."],
      // explanations: ["Luke is a taxi driver.",
      // "Luke is an ambulance driver.",
      // "Luke is a fisherman.",
      // "Luke delivers pizza."],
      // character_name: "Luke"},

      {trial_number: 4,
      scenarios: ["Tiffany watches her diet.",
      "Tiffany must be careful to avoid sugar.",
      "Tiffany uses needles every day."],
      explanations: ["Tiffany is a fitness instructor.",
      "Tiffany has an eating disorder.",
      "Tiffany does not know how to cook eggs.",
      "Tiffany is diabetic."],
      character_name: "Tiffany"},

      {trial_number: 5,
      scenarios: ["Jenny can't fall asleep.",
      "Jenny can't wait until it's finally morning.",
      "Jenny wonders how many presents she will find under the tree."],
      explanations: ["Jenny is nervous about her exam the next day.",
      "Jenny is worried about her ill mother.",
      "Jenny loves her bed.",
      "Jenny is excited about Christmas morning."],
      character_name: "Jenny"},

      // {trial_number: 6,
      // scenarios: ["Amanda is very thin.",
      // "Amanda has a difficult life.",
      // "Amanda doesn't even have a home."],
      // explanations: ["Amanda is a runway model.",
      // "Amanda has an eating disorder.",
      // "Amanda has lost her fake teeth.",
      // "Amanda is homeless."],
      // character_name: "Amanda"},

      {trial_number: 7,
      scenarios: ["Michael's job is to entertain people.",
      "Michael is a little shy sometimes.",
      "Michael sits in front of a computer writing all day long."],
      explanations: ["Michael is a famous magician.",
      "Michael the clown entertains sick children in the hospital.",
      "Michael is a poker player.",
      "Michael's job is to write novels."],
      character_name: "Michael"},

      {trial_number: 8,
      scenarios: ["Nicholas is driving his car very fast.",
      "Nicholas did not stop at the red light.",
      "Nicholas injured a little girl with his car."],
      explanations: ["Nicholas is running late for work.",
      "Nicholas' wife is in labour.",
      "Nicholas hates going for walks.",
      "Nicholas is a hit and run offender."],
      character_name: "Nicholas"},

      {trial_number: 9,
      scenarios: ["Andrea has made some new friends.",
      "Andrea's new friends control every single aspect of her life.",
      "Andrea has very suddenly cut off all contact with her family."],
      explanations: ["Andrea has just started going to university.",
      "Andrea is a kind and caring person.",
      "Andrea loves to be photographed.",
      "Andrea has joined a cult."],
      character_name: "Andrea"},

      // {trial_number: 10,
      // scenarios: ["Stella answers the phone at work.",
      // "Stella is a powerful woman.",
      // "Stella went to law school."],
      // explanations: ["Stella is a secretary.",
      // "Stella is a 911 phone call operator.",
      // "Stella is a baby-sitter.",
      // "Stella is a lawyer."],
      // character_name: "Stella"},

      {trial_number: 11,
      scenarios: ["People often dread visiting John.",
      "John tries his best to make people feel comfortable.",
      "John hands out free toothbrushes."],
      explanations: ["John always tells his guests long and boring stories.",
      "John is in the hospital.",
      "John is a famous hockey player.",
      "John is a dentist."],
      character_name: "John"},

      {trial_number: 12,
      scenarios: ["Jason is a successful business man.",
      "Jason's clients are mainly young people.",
      "Jason never gets caught by the police."],
      explanations: ["Jason is a bank manager.",
      "Jason is an owner of a rehabilitation center.",
      "Jason is a pimp.",
      "Jason is a drug dealer."],
      character_name: "Jason"},

      {trial_number: 13,
      scenarios: ["Emily stays home for the night.",
      "Emily feels that men are unreliable. ",
      "Emily has been waiting for her date to arrive for hours."],
      explanations: ["Emily has been grounded.",
      "Emily has an infection.",
      "Emily's date's car has broken down.",
      "Emily has been stood up by her date."],
      character_name: "Emily"},

      {trial_number: 14,
      scenarios: ["Gary is responsible for many lives.",
      "Gary's work can get be quite boring and repetitive.",
      "Gary's route is one of the busiest."],
      explanations: ["Gary is an army general.",
      "Gary is a surgeon.",
      "Gary is a clown.",
      "Gary is a sports-cast announcer."],
      character_name: "Gary"},

      {trial_number: 15,
      scenarios: ["Eric often carries binoculars with him.",
      "Eric always has an unpredictable schedule.",
      "Eric tries to solve mysteries."],
      explanations: ["Eric is a bird expert.",
      "Eric is a stalker.",
      "Eric is an astronaut.",
      "Eric is a tennis player."],
      character_name: "Eric"},

      {trial_number: 16,
      scenarios: ["Susan can hardly speak or think.",
      "Susan made a bad decision in her past.",
      "To show you're reading this, set all response sliders to the minimum."],
      explanations: ["Susan is very drunk.",
      "Susan is mentally handicapped.",
      "Susan has been kidnapped.",
      "Susan does not like doing much."],
      character_name: "Susan"}
    ];

    var bade = {
      timeline: [{
        type: 'bade',
        rating_type: 'posterior',
        rate_priors: false,
        scale_labels: badeScaleLabels,
        scenarios: jsPsych.timelineVariable('scenarios'),
        explanations: jsPsych.timelineVariable('explanations'),
        trial_number: jsPsych.timelineVariable('trial_number'),
        character_name: jsPsych.timelineVariable('character_name'),
      }],
      timeline_variables: badeTrials,
      randomize_order: true,
      post_trial_gap: 900
    }

    badeTimeline.push(bade);

    // task 3: PDI

    var pdiInstructions = {
      type: 'instructions',
      pages: ["Almost there! Next is a quick questionnaire designed to measure beliefs and vivid mental experiences. ",
      "We believe that these beliefs and experiences are much more common than has previously been supposed, and that most people have had some such experiences during their lives. ",
      "Please answer the following questions as honestly as you can. ",
      "Please note that we are NOT asking about experiences people may have had when under the influence of drugs."],
      show_clickable_nav: true
    };

    var pdi = {
      type: 'pdi-onepage',
      followUp: true,
      attentionCheck: true,
      includeCAPE: true
    };

    // task 4: CRT

    var crt_instructions = {
      type: "instructions",
      show_clickable_nav: true,
      pages: ["In the final task, you will solve some simple math or logic problems. They can all be worked out fairly straightforwardly. You certainly <b>don't</b> need paper and a pen/pencil for working them out. If you think you might, you're probably overthinking things.",
      "Do not answer 'I don't know' or 'no idea' or similar. Just give your best answer."]
    };

    var crt_questions = [
    {qNo: 0, question: "The ages of Mark and Adam add up to 28. Mark is 20 years older than Adam. How old is Adam?",
    unit: "years old"},
    {qNo: 1, question: "If it takes 10 seconds for 10 printers to print out 10 pages of paper, how many seconds will it take 50 printers to print out 50 pages of paper?",
    unit: "seconds"},
    {qNo: 2, question: "On a loaf of bread, there is a patch of mold. Every day, the patch doubles in size. If it takes 40 days for the patch to cover the entire loaf of bread, how many days would it take for the patch to cover half the loaf of bread?",
    unit: "days"},
    {qNo: 3, question: "If you're running a race and you pass the person in second place, what place are you in?",
    unit: "place"},
    {qNo: 4, question: "A farmer had 15 sheep and all but 8 died. How many are left?",
    unit: "sheep"},
    {qNo: 5, question: "Emily's father has three daughters. The first two are named April and May. What is the third daughter's name?"},
    {qNo: 6, question: "How many cubic feet of dirt are there in a hole that is 3' deep x 3' wide x 3' long?",
    unit: "cubic feet"},
    {qNo: 7, question: "How many days are there in a week? To show you're reading this, enter double the actual number",
    unit: "days"}
    ];

    var crtTrial = {
      type: 'crt',
      question: jsPsych.timelineVariable('question'),
      unit: jsPsych.timelineVariable('unit'),
      options: jsPsych.timelineVariable('options'),
      qNo: jsPsych.timelineVariable('qNo'),
      naivete: false
    };

    var crtTrials = {
        timeline: [crtTrial],
        timeline_variables: crt_questions,
    };

    var crtNaivete = {
      type: 'survey-multi-choice',
      questions: [
        {prompt: "The problems you've just finished are adapted from classic problems that are quite common on Turk, or web pages or books about problem solving, so you may have seen them before.<br><br>"+
        "You may have seen them with different wording (e.g., referring to the cost of a bat and a ball, time taking for machines to make widgets, and the time taken for lily pads to grow)<br><br>"+
        "Have you seen any of these problems before? Please answer honestly since it won't affect the rest of the survey or your payment, but will affect our data.<br><br>",
          options: [' Definitely not', ' Probably not', ' Uncertain', ' Probably yes', ' Definitely yes'],
          horizontal: true
        }
      ]
    }

    // Biographic info

    var bioData = {};

    function checkResponses(){
      //Check that all questions are answered, and that only numbers are used in responding to Age
      var age = $('input[name=ageText]', '#biography').val();
      var gender = $('input[name=genderRadio]:checked', '#biography').val();
      var education = $('input[name=eduRadio]:checked', '#biography').val();
      var language = $('input[name=languageRadio]:checked', '#biography').val();
      var religion = $('input[name=religionText]', '#biography').val();
      var comments = $('textarea', '#biography').val();

      var ageFail = true;
      var genderFail = true;
      var genderSelfDescribe = false;
      var languageFail = true;
      var eduFail = true;
      var religionFail = true;

      if( age > 0 ){
        ageFail = false;
        $('#age>p').css('color', 'black');
      } else {
        $('#age>p').css('color', 'red');
      }

      if( gender == 'other' ){
        genderSelfDescribe = true;
        var descr = $('input[name=other_text]', '#biography').val().replace(/\s+/g, '');
        if( descr.length > 0 ){
          genderSelfDescribe = false;
          gender = descr
        }
      }

      if (typeof gender != 'undefined'){
        genderFail = false;
        $('#gender>p').css('color', 'black');
      } else {
        $('#gender>p').css('color', 'red');
      }

      if (education >= 0){
        eduFail = false;
        $('#education>p').css('color', 'black');
      } else {
        $('#education>p').css('color', 'red');
      }

      if( religion >= 0 && religion <= 100 && religion !== ''){
        religionFail = false;
        $('#religion>p').css('color', 'black');
      } else {
        $('#religion>p').css('color', 'red');
      }

      if( language >= 0 ){
        languageFail = false;
        $('#language>p').css('color', 'black');
      } else {
        $('#language>p').css('color', 'red');
      }


      if( genderFail || ageFail || languageFail || genderSelfDescribe || eduFail || religionFail ){
        var alertMessage = "Please check you've provided an answer to all questions in red.";
        if( ageFail || religionFail ){
          alertMessage += " Check that you've only included numbers when giving your age or rating religious belief. "
        }
        if( genderSelfDescribe ){
          alertMessage += " If you've chosen to self-describe your gender, please fill in a value. "
        }
        alert(alertMessage);
      } else {
        bioData = {
          age: age,
          gender: gender,
          language: language,
          education: education,
          religion: religion,
          comments: comments
        };
        return true;
      }

    };

    var biographic = {
      type: 'external-html',
      url: '../views/biographic.html',
      check_fn: checkResponses,
      cont_btn: 'submit',
    }

    timeline.push(consent);
    timeline.push(mainInstructions);

    // Randomize order of bead/bade tasks
    if( Math.random() < 0.5 ){
      timeline = timeline.concat(beadTimeline)
      timeline = timeline.concat(badeTimeline)
    } else {
      timeline = timeline.concat(badeTimeline)
      timeline = timeline.concat(beadTimeline)
    }

    // timeline = timeline.concat(beadTimeline);
    // timeline = timeline.concat(badeTimeline);


    timeline.push(pdiInstructions);
    timeline.push(pdi);

    timeline.push(crt_instructions);
    timeline.push(crtTrials);
    timeline.push(crtNaivete);

    timeline.push(biographic);


    jsPsych.init({
        default_iti: 500,
        show_progress_bar: true,
        preload_images: ['img/greek-urn-md.png'],
        exclusions: {
          min_width: 800,
          min_height: 600
        },
        timeline: timeline,
        on_finish: function(){
          save();
        }
    });


function save(){
  var endTime = (new Date()).getTime();
  var duration = endTime-startTime;
  var interactionData = jsPsych.data.getInteractionData().json();
  jsPsych.data.get().addToLast({biodata: bioData,
                                duration: duration,
                                interactionData: interactionData,
                                comprehension: comprehensionRounds});

  var data = jsPsych.data.get().json();
  console.log('    About to post survey output data...', data);

  var dataUrl = '/Vn3OGu8kcy?trialId=' + trialId;
  $.ajax({
     type: 'POST',
     url: dataUrl,
     data: data,
     contentType: "application/json",
     error: function(request, status, error){
       console.log('    Error posting data...', request, status, error)
     },
     complete: finish(cmpltnCd)
   });
}

function finish(cmpltnCd){
  cmpltnCd +=  trialId;
  window.location.href = "/TyNFQbzAlF?gvmejG="+cmpltnCd;
}

function shuffle(unshuffled){
  // shuffle an array
  var shuffled = [];
  var N = unshuffled.length;
  for( var i = 0; i < N; i++ ){
    var index = Math.floor(Math.random() * (unshuffled.length));
    var newValue = unshuffled[index];
    shuffled.push(newValue);
    unshuffled.splice(index, 1);
  }
  return shuffled;
};

function makeCode(len){
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxy0123456789";
    for( var i=0; i < len; i++ ){
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
};

function flipdraws(draws){
  // Randomly flip a list of draws, so that the majority color could 0s or 1s
  // For the inputs below, it's always 0s
  var flip = Math.random();
  var out = [];
  if( flip < 0.5){
    draws.forEach(function(e){
      out.push(Math.abs(e-1));
    });
    return out;
  } else {
    return draws;
  }
};


    </script>
</html>
